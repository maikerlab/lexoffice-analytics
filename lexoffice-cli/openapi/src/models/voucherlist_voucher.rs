/*
 * lexoffice Public API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VoucherlistVoucher {
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    /// Voucher Type
    #[serde(rename = "voucherType")]
    pub voucher_type: VoucherType,
    /// Status
    #[serde(rename = "voucherStatus")]
    pub voucher_status: VoucherStatus,
    #[serde(rename = "voucherNumber")]
    pub voucher_number: String,
    #[serde(rename = "voucherDate")]
    pub voucher_date: String,
    #[serde(rename = "createdDate")]
    pub created_date: String,
    #[serde(rename = "updatedDate")]
    pub updated_date: String,
    #[serde(rename = "dueDate", skip_serializing_if = "Option::is_none")]
    pub due_date: Option<String>,
    #[serde(rename = "contactId", skip_serializing_if = "Option::is_none")]
    pub contact_id: Option<uuid::Uuid>,
    #[serde(rename = "contactName", skip_serializing_if = "Option::is_none")]
    pub contact_name: Option<String>,
    #[serde(rename = "totalAmount", skip_serializing_if = "Option::is_none")]
    pub total_amount: Option<f32>,
    #[serde(rename = "openAmount", skip_serializing_if = "Option::is_none")]
    pub open_amount: Option<f32>,
    #[serde(rename = "currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<Currency>,
    #[serde(rename = "archived")]
    pub archived: bool,
}

impl VoucherlistVoucher {
    pub fn new(id: uuid::Uuid, voucher_type: VoucherType, voucher_status: VoucherStatus, voucher_number: String, voucher_date: String, created_date: String, updated_date: String, archived: bool) -> VoucherlistVoucher {
        VoucherlistVoucher {
            id,
            voucher_type,
            voucher_status,
            voucher_number,
            voucher_date,
            created_date,
            updated_date,
            due_date: None,
            contact_id: None,
            contact_name: None,
            total_amount: None,
            open_amount: None,
            currency: None,
            archived,
        }
    }
}

/// Voucher Type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum VoucherType {
    #[serde(rename = "salesinvoice")]
    Salesinvoice,
    #[serde(rename = "salescreditnote")]
    Salescreditnote,
    #[serde(rename = "purchaseinvoice")]
    Purchaseinvoice,
    #[serde(rename = "purchasecreditnote")]
    Purchasecreditnote,
    #[serde(rename = "invoice")]
    Invoice,
    #[serde(rename = "downpaymentinvoice")]
    Downpaymentinvoice,
    #[serde(rename = "creditnote")]
    Creditnote,
    #[serde(rename = "orderconfirmation")]
    Orderconfirmation,
    #[serde(rename = "quotation")]
    Quotation,
    #[serde(rename = "deliverynote")]
    Deliverynote,
}

impl Default for VoucherType {
    fn default() -> VoucherType {
        Self::Salesinvoice
    }
}
/// Status
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum VoucherStatus {
    #[serde(rename = "draft")]
    Draft,
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "paid")]
    Paid,
    #[serde(rename = "paidoff")]
    Paidoff,
    #[serde(rename = "voided")]
    Voided,
    #[serde(rename = "transferred")]
    Transferred,
    #[serde(rename = "sepadebit")]
    Sepadebit,
    #[serde(rename = "overdue")]
    Overdue,
    #[serde(rename = "accepted")]
    Accepted,
    #[serde(rename = "rejected")]
    Rejected,
}

impl Default for VoucherStatus {
    fn default() -> VoucherStatus {
        Self::Draft
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Currency {
    #[serde(rename = "EUR")]
    Eur,
}

impl Default for Currency {
    fn default() -> Currency {
        Self::Eur
    }
}

