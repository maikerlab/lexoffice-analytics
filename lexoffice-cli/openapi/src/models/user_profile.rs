/*
 * lexoffice Public API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserProfile {
    #[serde(rename = "organizationId", skip_serializing_if = "Option::is_none")]
    pub organization_id: Option<uuid::Uuid>,
    #[serde(rename = "companyName", skip_serializing_if = "Option::is_none")]
    pub company_name: Option<String>,
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<Box<crate::models::UserProfileCreated>>,
    #[serde(rename = "connectionId", skip_serializing_if = "Option::is_none")]
    pub connection_id: Option<uuid::Uuid>,
    #[serde(rename = "taxType", skip_serializing_if = "Option::is_none")]
    pub tax_type: Option<TaxType>,
    #[serde(rename = "distanceSalesPrinciple", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub distance_sales_principle: Option<Option<DistanceSalesPrinciple>>,
    #[serde(rename = "businessFeatures", skip_serializing_if = "Option::is_none")]
    pub business_features: Option<Vec<BusinessFeatures>>,
    #[serde(rename = "smallBusiness", skip_serializing_if = "Option::is_none")]
    pub small_business: Option<bool>,
}

impl UserProfile {
    pub fn new() -> UserProfile {
        UserProfile {
            organization_id: None,
            company_name: None,
            created: None,
            connection_id: None,
            tax_type: None,
            distance_sales_principle: None,
            business_features: None,
            small_business: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TaxType {
    #[serde(rename = "net")]
    Net,
    #[serde(rename = "gross")]
    Gross,
    #[serde(rename = "vatfree")]
    Vatfree,
}

impl Default for TaxType {
    fn default() -> TaxType {
        Self::Net
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DistanceSalesPrinciple {
    #[serde(rename = "ORIGIN")]
    Origin,
    #[serde(rename = "DESTINATION")]
    Destination,
}

impl Default for DistanceSalesPrinciple {
    fn default() -> DistanceSalesPrinciple {
        Self::Origin
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BusinessFeatures {
    #[serde(rename = "INVOICING")]
    Invoicing,
    #[serde(rename = "INVOICING_PRO")]
    InvoicingPro,
    #[serde(rename = "BOOKKEEPING")]
    Bookkeeping,
}

impl Default for BusinessFeatures {
    fn default() -> BusinessFeatures {
        Self::Invoicing
    }
}

