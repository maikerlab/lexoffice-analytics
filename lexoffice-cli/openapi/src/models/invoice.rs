/*
 * lexoffice Public API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Invoice {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<uuid::Uuid>,
    #[serde(rename = "organizationId", skip_serializing_if = "Option::is_none")]
    pub organization_id: Option<uuid::Uuid>,
    #[serde(rename = "createdDate", skip_serializing_if = "Option::is_none")]
    pub created_date: Option<String>,
    #[serde(rename = "updatedDate", skip_serializing_if = "Option::is_none")]
    pub updated_date: Option<String>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<i32>,
    #[serde(rename = "language", skip_serializing_if = "Option::is_none")]
    pub language: Option<Language>,
    #[serde(rename = "archived", skip_serializing_if = "Option::is_none")]
    pub archived: Option<bool>,
    #[serde(rename = "voucherStatus", skip_serializing_if = "Option::is_none")]
    pub voucher_status: Option<VoucherStatus>,
    #[serde(rename = "voucherNumber", skip_serializing_if = "Option::is_none")]
    pub voucher_number: Option<String>,
    #[serde(rename = "voucherDate", skip_serializing_if = "Option::is_none")]
    pub voucher_date: Option<String>,
    #[serde(rename = "dueDate", skip_serializing_if = "Option::is_none")]
    pub due_date: Option<String>,
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<Box<crate::models::VoucherAddress>>,
    #[serde(rename = "xRechnung", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub x_rechnung: Option<Option<Box<crate::models::InvoiceXRechnung>>>,
    #[serde(rename = "lineItems", skip_serializing_if = "Option::is_none")]
    pub line_items: Option<Vec<crate::models::LineItem>>,
    #[serde(rename = "totalPrice", skip_serializing_if = "Option::is_none")]
    pub total_price: Option<Box<crate::models::TotalPrice>>,
    #[serde(rename = "taxAmounts", skip_serializing_if = "Option::is_none")]
    pub tax_amounts: Option<Vec<crate::models::TaxAmount>>,
    #[serde(rename = "taxConditions", skip_serializing_if = "Option::is_none")]
    pub tax_conditions: Option<Box<crate::models::TaxConditions>>,
    #[serde(rename = "paymentConditions", skip_serializing_if = "Option::is_none")]
    pub payment_conditions: Option<Box<crate::models::PaymentConditions>>,
    #[serde(rename = "shippingConditions", skip_serializing_if = "Option::is_none")]
    pub shipping_conditions: Option<Box<crate::models::ShippingConditions>>,
    #[serde(rename = "closingInvoice", skip_serializing_if = "Option::is_none")]
    pub closing_invoice: Option<bool>,
    #[serde(rename = "claimedGrossAmount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub claimed_gross_amount: Option<Option<f32>>,
    #[serde(rename = "downPaymentDeductions", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub down_payment_deductions: Option<Option<serde_json::Value>>,
    #[serde(rename = "recurringTemplateId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub recurring_template_id: Option<Option<String>>,
    #[serde(rename = "relatedVouchers", skip_serializing_if = "Option::is_none")]
    pub related_vouchers: Option<Vec<crate::models::RelatedVoucher>>,
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "introduction", skip_serializing_if = "Option::is_none")]
    pub introduction: Option<String>,
    #[serde(rename = "remark", skip_serializing_if = "Option::is_none")]
    pub remark: Option<String>,
    #[serde(rename = "files", skip_serializing_if = "Option::is_none")]
    pub files: Option<Box<crate::models::File>>,
}

impl Invoice {
    pub fn new() -> Invoice {
        Invoice {
            id: None,
            organization_id: None,
            created_date: None,
            updated_date: None,
            version: None,
            language: None,
            archived: None,
            voucher_status: None,
            voucher_number: None,
            voucher_date: None,
            due_date: None,
            address: None,
            x_rechnung: None,
            line_items: None,
            total_price: None,
            tax_amounts: None,
            tax_conditions: None,
            payment_conditions: None,
            shipping_conditions: None,
            closing_invoice: None,
            claimed_gross_amount: None,
            down_payment_deductions: None,
            recurring_template_id: None,
            related_vouchers: None,
            title: None,
            introduction: None,
            remark: None,
            files: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Language {
    #[serde(rename = "de")]
    De,
    #[serde(rename = "en")]
    En,
}

impl Default for Language {
    fn default() -> Language {
        Self::De
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum VoucherStatus {
    #[serde(rename = "draft")]
    Draft,
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "paid")]
    Paid,
    #[serde(rename = "voided")]
    Voided,
}

impl Default for VoucherStatus {
    fn default() -> VoucherStatus {
        Self::Draft
    }
}

