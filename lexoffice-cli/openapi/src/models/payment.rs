/*
 * lexoffice Public API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Payment {
    #[serde(rename = "openAmount", skip_serializing_if = "Option::is_none")]
    pub open_amount: Option<f32>,
    #[serde(rename = "currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<Currency>,
    #[serde(rename = "paymentStatus", skip_serializing_if = "Option::is_none")]
    pub payment_status: Option<PaymentStatus>,
    #[serde(rename = "voucherType", skip_serializing_if = "Option::is_none")]
    pub voucher_type: Option<VoucherType>,
    #[serde(rename = "voucherStatus", skip_serializing_if = "Option::is_none")]
    pub voucher_status: Option<VoucherStatus>,
    #[serde(rename = "paidDate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub paid_date: Option<Option<String>>,
    #[serde(rename = "paymentItems", skip_serializing_if = "Option::is_none")]
    pub payment_items: Option<Vec<crate::models::PaymentItem>>,
}

impl Payment {
    pub fn new() -> Payment {
        Payment {
            open_amount: None,
            currency: None,
            payment_status: None,
            voucher_type: None,
            voucher_status: None,
            paid_date: None,
            payment_items: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Currency {
    #[serde(rename = "EUR")]
    Eur,
}

impl Default for Currency {
    fn default() -> Currency {
        Self::Eur
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PaymentStatus {
    #[serde(rename = "balanced")]
    Balanced,
    #[serde(rename = "openRevenue")]
    OpenRevenue,
    #[serde(rename = "openExpense")]
    OpenExpense,
}

impl Default for PaymentStatus {
    fn default() -> PaymentStatus {
        Self::Balanced
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum VoucherType {
    #[serde(rename = "salesinvoice")]
    Salesinvoice,
    #[serde(rename = "salescreditnote")]
    Salescreditnote,
    #[serde(rename = "purchaseinvoice")]
    Purchaseinvoice,
    #[serde(rename = "purchasecreditnote")]
    Purchasecreditnote,
    #[serde(rename = "invoice")]
    Invoice,
    #[serde(rename = "downpaymentinvoice")]
    Downpaymentinvoice,
    #[serde(rename = "creditnote")]
    Creditnote,
}

impl Default for VoucherType {
    fn default() -> VoucherType {
        Self::Salesinvoice
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum VoucherStatus {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "paid")]
    Paid,
    #[serde(rename = "paidoff")]
    Paidoff,
    #[serde(rename = "voided")]
    Voided,
    #[serde(rename = "transferred")]
    Transferred,
    #[serde(rename = "sepadebit")]
    Sepadebit,
}

impl Default for VoucherStatus {
    fn default() -> VoucherStatus {
        Self::Open
    }
}

